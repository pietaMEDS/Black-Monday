require('dotenv').config();
const dotenv = require('dotenv');
dotenv.config();
const TOKEN = process.env.TOKEN

const { VK, Keyboard, getRandomId } = require('vk-io');

const { HearManager } = require('@vk-io/hear');

const VkBot = require('node-vk-bot-api');

const service = new VkBot(TOKEN);

const cmds = require('./commands.js');

const parser = require("./scripts/parser.js");
const { nextTick } = require('process');

const { startKeyBoard, Reference, backButton, priceBot, group } = require("./button.js")

const subData = require('./data/users/subscribe.json');
const subscribeScript = require('./scripts/subscribeScript');

const vk = new VK({
    token: TOKEN
});

let flag = false;
let changeGroup = false;

const bot = new HearManager();

let week;

vk.updates.on('message_new', bot.middleware);

    bot.hear(/start/i, async(context, next) => {
      context.send({ message: `–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞`, keyboard: startKeyBoard })
  })
  
  bot.hear(/–ù–∞–∑–∞–¥/i, async(context, next) => {
    context.send({ message: `–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥`, keyboard: startKeyBoard })
  })
  
  bot.hear(/üö™–ö–∞–±–∏–Ω–µ—Ç/i, async(context, next) => {
    if(WhatUser(context)){
    context.send({ message: `–ù–∞–ø–∏—à–∏—Ç–µ –∫–∞–±–∏–Ω–µ—Ç`, keyboard: JSON.stringify({buttons:[[{action:{type:"text", label:"–ù–∞–∑–∞–¥"}, color:"secondary"}]], inline: false}) });
    }
  })
  
  bot.hear(/üéì–ü—Ä–µ–ø–æ–¥–æ–≤–∞—Ç–µ–ª—å/i, async(context, next) => {
    if(WhatUser(context)){
    context.send({ message: `–§.–ò.–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è`, keyboard: JSON.stringify({buttons:[[{action:{type:"text", label:"–ù–∞–∑–∞–¥"}, color:"secondary"}]], inline:false}) });
    }
  })
  


  bot.hear(/üìÖ–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ/i, async(context, next) => {
    flag = true;
    if(WhatUser(context)){
    context.send({ message: `–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∫–æ–π –≥—Ä—É–ø–ø—ã –≤–∞–º –Ω—É–∂–Ω–æ?`, keyboard: JSON.stringify({buttons:[[{action:{type:"text", label:"–ú–æ—è –≥—Ä—É–ø–ø–∞"}, color:"primary"}] ,[{action:{type:"text", label:"–ù–∞–∑–∞–¥"}, color:"secondary"}]], inline: false}) });
    }
  })
  
  bot.hear(/–ú–æ—è –≥—Ä—É–ø–ø–∞/i, async(context, next) => {
    // context.send({ message: `—Ö—É–π –∑–Ω–∞–µ—Ç—å —á–µ —Ç—É—Ç –ø–∏—Å–∞—Ç—å –≤–∞—â–µ`, keyboard: JSON.stringify({buttons:[[{action:{type:"text", label:"–ù–∞–∑–∞–¥"}, color:"secondary"}]], inline:false}) });
    if (flag) {
      if(WhatUser(context)){
        let data = require('./data/users/subscribe.json');
        console.log(data['user_'+context.senderId].group);
      SearchGroup(context, true);
      week = parser.parse(data['user_'+context.senderId].group.toLowerCase());
      context.send({ message: `–í—ã–±–µ—Ä–∏ –ø–æ–¥–≥—Ä—É–ø–ø—É`, keyboard: JSON.stringify({buttons:[[{action:{type:"text", label:"–ü–µ—Ä–≤–∞—è"}, color: "negative" }, {action:{type:"text", label:"–í—Ç–æ—Ä–∞—è"}, color: "negative" }], [{action:{type:"text", label:"–ù–∞–∑–∞–¥"}, color:"secondary"}]], inline:false}) });
      }
      flag = false;
      }
  })

  // bot.hear(/–î—Ä—É–≥–∞—è –≥—Ä—É–ø–ø–∞/i, async(context, next) => {
  //   context.send({ message: `–í–≤–µ–¥–∏—Ç–µ –≥—Ä—É–ø–ø—É`, keyboard: JSON.stringify({buttons:[[{action:{type:"text", label:"–ù–∞–∑–∞–¥"}, color:"secondary"}]], inline:false}) });
  // })

  bot.hear(/üìú–°–ø—Ä–∞–≤–∫–∞/i, async(context, next) => {
    context.send({ message: `–û –Ω–∞—Å`, keyboard: JSON.stringify({buttons:[[{action:{type:"text", label:"–ö–æ–≥–¥–∞ –±—ã–ª —Å–æ–∑–¥–∞–Ω –±–æ—Ç"}, color: "primary" }, {action:{type:"text", label:"–°—Ç–æ–∏–º–æ—Å—Ç—å –±–æ—Ç–∞ –≤ –º–µ—Å—è—Ü"}, color: "primary" }], [{action:{type:"text", label:"–ù–∞–∑–∞–¥"}, color:"secondary"}]], inline:false}) });
  })

  bot.hear(/–ò–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ—é –≥—Ä—É–ø–ø—É/i, async(context, next) => {
    let fs = require("fs");
    let fileName = './data/users/subscribe.json';
    let file = require('./data/users/subscribe.json');
    let userID = context.senderId;
    userInfo={
      userID,
    };
    eval("file.user_" + userID + " = userInfo;");
    fs.writeFile(fileName,JSON.stringify(file, null, 2), function writeJSON(err) {
      if (err) return console.log(err);
      console.log('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ '+userID+' –°–±—Ä–æ—à–µ–Ω–∞');
  });
    context.send("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É");
  })

  

  bot.hear(/–°—Ç–æ–∏–º–æ—Å—Ç—å –±–æ—Ç–∞ –≤ –º–µ—Å—è—Ü/i, async(context, next) => {
    context.send({ message: `–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –º–µ—Å—è—Ü 50 —Ä—É–±–ª–µ–π`, keyboard: JSON.stringify({buttons:[[{action:{type:"text", label:"–ö—É–ø–∏—Ç—å"}, color: "negative" }], [{action:{type:"text", label:"–ù–∞–∑–∞–¥"}, color:"secondary"}]], inline:false}) });
  })
  
  bot.hear(/–ö–æ–≥–¥–∞ –±—ã–ª —Å–æ–∑–¥–∞–Ω –±–æ—Ç/i, async(context, next) => {
    if(WhatUser(context)){
    context.send({ message: `–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –±–æ—Ç–∞ –Ω–∞—á–∞–ª–∞—Å—å –≤ –¥–∞–ª–µ–∫–æ–º 09.06.2023`, keyboard: JSON.stringify({buttons:[[{action:{type:"text", label:"–ù–∞–∑–∞–¥"}, color:"secondary"},]]}) });
    }
  })
  
  bot.hear(/^[–∞-—è]{1,5}-\d{2}-\d$/i, async(context, next) => {
    if (flag) {
    if(WhatUser(context)){
    SearchGroup(context);
    week = parser.parse(context.text.toLowerCase());
    context.send({ message: `–í—ã–±–µ—Ä–∏ –ø–æ–¥–≥—Ä—É–ø–ø—É`, keyboard: JSON.stringify({buttons:[[{action:{type:"text", label:"–ü–µ—Ä–≤–∞—è"}, color: "negative" }, {action:{type:"text", label:"–í—Ç–æ—Ä–∞—è"}, color: "negative" }], [{action:{type:"text", label:"–ù–∞–∑–∞–¥"}, color:"secondary"}]], inline:false}) });
    }
    flag = false;
    }

    if (changeGroup) {
      if(WhatUser(context)){
      switchGroup(context);
      week = parser.parse(context.text.toLowerCase());
      context.send({ message: `–í–∞—à–∞ –≥—Ä—É–ø–ø–∞ –∏–∑–º–µ–Ω–µ–Ω–∞`, keyboard: startKeyBoard });
      }
      changeGroup = false;
      }
  })
  
  bot.hear(/^[–∞-—è]{1}\d{3}/i, async(context, next) =>{
    
  })
  
  bot.hear(/–ü–µ—Ä–≤–∞—è/i, async(context, next) => {
    if(WhatUser(context)){
    let groupName;
    context.send({ message: `–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥`, keyboard: startKeyBoard })
    eval('groupName = parser.parse(subData.user_' + context.senderId + '.SearchGroup.toLowerCase())');
    parser.output(context,'–ü–µ—Ä–≤–∞—è', groupName);
    }
  })
  
  bot.hear(/–í—Ç–æ—Ä–∞—è/i, async(context, next) => {
    if(WhatUser(context)){
      let groupName;
      context.send({ message: `–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥`, keyboard: startKeyBoard })
      eval('groupName = parser.parse(subData.user_' + context.senderId + '.SearchGroup.toLowerCase())');
      parser.output(context,'–í—Ç–æ—Ä–∞—è', groupName);
    }
  })
  

function switchGroup (msg) {
  let data = require('./data/users/subscribe.json');
  const fs = require("fs");
  const fileName = './data/users/subscribe.json';

  eval("data.user_" + msg.senderId + ".group = msg.text")

  fs.writeFile(fileName, JSON.stringify(data, null, 2), function writeJSON(err) {
    if (err) return console.log(err);
    console.log('–¢–µ—Å—Ç');
    });
}

function SearchGroup (msg, mygroup) {
  let data = require('./data/users/subscribe.json');
  const fs = require("fs");
  const fileName = './data/users/subscribe.json';

  if (mygroup) {
    eval("data.user_" + msg.senderId + ".SearchGroup = data['user_'+msg.senderId].group")
  }
  else{
    eval("data.user_" + msg.senderId + ".SearchGroup = msg.text")
  }


  fs.writeFile(fileName, JSON.stringify(data, null, 2), function writeJSON(err) {
    if (err) return console.log(err);
    console.log('–¢–µ—Å—Ç');
    });
}

function WhatUser(msg){
  let data = require('./data/users/subscribe.json');
  if (data['user_'+msg.senderId] === undefined){
    return false;
  } 
  else if(data['user_'+msg.senderId].subscribe){
    return true;
  }
  else{
    return false;
  }
}

async function start(){
  let workb = service.startPolling((err) => {
    if (err) {
      console.error('BOT Error : ' + err);
    }
  });
  let works = vk.updates.start().catch(console.error);
  await workb & works;
  console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!!');
  return workb, works
}

start();
